-- we don't know how to generate root <with-no-name> (class Root) :(
create table OPERATIONS
(
	ID INTEGER default AUTOINCREMENT: start 1 increment 1 generated always as identity
		constraint OPERATIONS_PK
			primary key,
	DATE TIMESTAMP not null,
	CURRENCY_BUY VARCHAR(4) not null,
	CURRENCY_SALE VARCHAR(4),
	RATE DOUBLE not null,
	BUY_SUMM DOUBLE not null,
	SALE_SUMM DOUBLE not null,
	STATUS VARCHAR(10) default 'LIVE' not null
);

create table REFERENCE
(
	ID INTEGER default AUTOINCREMENT: start 1 increment 1 generated always as identity
		constraint TABLE_NAME_PK
			primary key,
	NUM_CODE INTEGER not null
		constraint TABLE_NAME_NUM_CODE_UINDEX
			unique,
	STR_CODE VARCHAR(4) not null
		constraint TABLE_NAME_STR_CODE_UINDEX
			unique,
	NAME VARCHAR(256) not null,
	RATE DOUBLE not null,
	SALE_RATE DOUBLE not null,
	BUY_RATE DOUBLE not null
);

#DataSourceSettings#
#LocalDataSource: Currex
#BEGIN#
<data-source source="LOCAL" name="Currex" uuid="432c2133-65f9-4b6e-8fb8-73e80fbc54f1">
<database-info product="Apache Derby" version="10.14.1.0 - (1808820)" jdbc-version="4.2" driver-name="Apache Derby Embedded JDBC Driver" driver-version="10.14.1.0 - (1808820)" dbms="DERBY" exact-version="10.14.1.0" exact-driver-version="10.14">
<identifier-quote-string>&quot;</identifier-quote-string>
</database-info>
<case-sensitivity plain-identifiers="upper" quoted-identifiers="exact"/>
<driver-ref>derby.embedded</driver-ref>
<synchronize>true</synchronize>
<jdbc-driver>org.apache.derby.jdbc.EmbeddedDriver</jdbc-driver>
<jdbc-url>jdbc:derby:$USER_HOME$/IdeaProjects/PrivatBank/PrivatBankCurrency/DB/Currex;create=true</jdbc-url>
<secret-storage>master_key</secret-storage><user-name>aaa</user-name>
<introspection-schemas>*:@,APP</introspection-schemas></data-source>
#END#





        ResponseEntity<NBUContainer> nbuR = template.getForEntity(NBU_XML_REQUEST, NBUContainer.class);
        NBUContainer body = nbuR.getBody();
        body.exchange.size();


//        ResponseEntity<PBRateContainer> pbResponse = template.getForEntity(PB_XML_REQUEST, PBRateContainer.class);



    //     * <exchange>
//     * <currency>
//     * <r030>36</r030>
//            * <txt>Австралійський долар</txt>
//            * <rate>18.115392</rate>
//            * <cc>AUD</cc>
//            * <exchangedate>23.05.2019</exchangedate>
//            * </currency>
//            * </exchange>
    @XmlRootElement(name = "exchange")
    private static class NBUContainer {
        @XmlElement(name = "currency")
        List<Currency> exchange = new ArrayList<>();
    }

    @XmlRootElement(name = "currency")
    static class Currency {
        @XmlElement()
        int r030 = 36;
        @XmlElement()
        String txt = "Австралійський долар";
        @XmlElement()
        double rate = 18.115392;
        @XmlElement()
        String cc = "AUD";
        @XmlElement()
        String exchangedate = "23.05.2019";
    }

    /**
     * exchangerates>
     * <row>
     * <exchangerate ccy="USD" base_ccy="UAH" buy="26.00000" sale="26.40000"/>
     * </row>
     * </exchangerates>
     */
    public static void main(String[] args) throws JAXBException {
        //Create JAXB Context
        JAXBContext jaxbContext = JAXBContext.newInstance(NBUContainer.class);

        //Create Marshaller
        Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

        //Required formatting??
        jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

        //Print XML String to Console
        StringWriter sw = new StringWriter();

        //Write XML to StringWriter
        NBUContainer nbuContainer = new NBUContainer();
        nbuContainer.exchange.add(new Currency());
        nbuContainer.exchange.add(new Currency());
        jaxbMarshaller.marshal(nbuContainer, sw);

        //Verify XML Content
        String xmlContent = sw.toString();
        System.out.println(xmlContent);

    }
